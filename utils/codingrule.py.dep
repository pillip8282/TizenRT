# -*- coding:utf-8 -*-
import sys
import subprocess
import argparse


def get_filename(output: str):
    lines = output.strip().split('\n')
    files = []
    prefix = ('commit', 'Author', 'Date', ' ', "\n")
    for line in lines:
        if not line.startswith(prefix) and line != "":
            files.append(line)
    return files


def get_result(file_list, git_path):
    app_path = '/home/kang/ext/UTILS/TIZENRT_CODING_RULE/\
coding-style-guides-master/c/'
    app_name = 'checkpatch_tizen.pl'
    app_path = app_path + app_name
    for fname in file_list:
        out = subprocess.Popen([app_path, git_path + '/' + fname],
                               stderr=subprocess.STDOUT,
                               stdout=subprocess.PIPE)
        t = out.communicate()[0], out.returncode
        if t[1] != 0:
            print(t[0].decode())


def get_abspath():
    return subprocess.check_output([
        'git', 'rev-parse', '--show-toplevel']).decode().strip()


def main(commit_id: str):
    """
    Entry point to start parser
    """
    output = subprocess.check_output(['git', 'show',
                                      '--name-only', commit_id]).decode()
    get_result(get_filename(output), get_abspath())


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run parser")
    parser.add_argument(
        "--commit", type=str, help="commit id to check")
    args = parser.parse_args()

    sys.exit(main(args.commit))
